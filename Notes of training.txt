Industry Expectation :-
--Topics :- OOPS + OOAD +SOLID + DRY + GOD + Exception handling + File IO + Networking + DB + Threads + GUI
--Outcome : One project
--DSA (400 + Self solved problem)
--DBMS
--Networking
--OS

Java programming 
-OOPS
-Platform independent -WORA
 WORA-Write once Run Anywhere
-Open Source 
-development/testing/security/Networking 
-JDK - Java development KIt 
-JRE - Java Runtime Enviorment
-Wrapper (Class)
-Every program of java starts with a Class
- class name cannot be staeted with a number or any other special char except _ or $
- class name must be same as file name

JDK - JAVA development kit 
- it provides javadoc
- it provides java compiler
- it also provides jar/war/ear/rar
JRE - Java Runtime Enviorment
- JRE is divided into 2 parts
-- JVM - Java virtual machine (Interpreter Executes line by line code of byte code)
    actually JVM is responsible to convert byte code to machine code
-- Libraries



######### Training Class - 2 #########

## Hello World Progrsam 
-Keywords
-- Class 
-- Public
-- Static
-- Void
-- main
-- String



# System class
--.in (Obj of InputStream Defined under System Class) 
--.out(Obj of PrintStream Defined under System Class) 
--.err(Obj of PrintStream Defined under System Class)
 
# Type Casting
-- Integer.parseInt() [Used for converting String to Integer number]
-- Float.parsefloat() [Used for converting String to Float number]
-- Double.parsedouble() [Used for converting String to double number]



############################ Class3 / Class4 ###############################################
Date:- 28/09/2022
Edited :- 30/09/2022
# Data Type
--Primitive  (int Byte long short float double char  bool)
-----Primitive means primary
-----Value type (Because it store value only)
-----Simple type (Only contain same typr of data)
-----Inspired from C , C++
-----Immutable(Does not change in the original value if we channge in Copied)
-----Static Memory Allocation
--Non Primitive (Array String Class&Obj Integer Long Float Double Byte Short)
-----Reference type( Keep Address/Reference)(Address could be of 4 byte (32bit) or 8 byte(64 bit))
-----Complex type (Contain many type of data like a bag)
-----Dynamic Memory Allocation
--Keywords
-----Keywords are reserve words,Compiler knows these so it know how much memory is to allocate for primitive, this is get decided on compile time.
-----Start with small letter 

--Heap (Storage space Made by java to store all object)
-----String pool(Inside Heap there is a special area where java store string called Stronng pool)

--String 
-----(String is a collection of caharacter )
-----String is a predefined Java Class
-----String also behave like data type
-----String obj can be created in 2 ways
-----a)Literal way(1 or 0 way)
-----b)new object way (2 or 1 obj)
-----String store in String pool
-----String is a final class in Java (No one can inherit)
-----String obj are Immutable
-----intern()
        when you write String a = "Amit" -> Internally it is converted into
        String a = "Amit".intern()
        intern is a method in a string, this method is used to check the string exist in a pool or not. It gives the reference of a string in a pool


Q. How to build a muttable string and how it did that? (H/W)
Sol :- We can Use Class StringBuilder or StringBuffer to create mutable String.
        StringBuilder Creates a seq of char (Known as Array of char)
        3 Constructor are available 


Q.What is the diff between string builder and string buffer? (H/W)
Sol:- --String Builder is Faster then StringBuffer
      --StringBilder is not synchronized where StringBuffer is Synchronized 

--H/W:
    input : aMIt sRiVaStaVA
    Output: Amit Srivastava 
    Hint : Use String Method
    There is only two methods are available about String Case 1 is toLower 2 is toUpper So we can not perform the question only through method

    Q2:
        input: ram@yahoo.com
        Output: true,False
        Ask:- If @ comes more than one time or the domain is something else  other than .com will the email valid

###### Class 5 (7/10/2022)###############
String Buffer 
--Default Cacpacity 16 
--(Intial length of string + 16 is the initial capacity if string is initialized)
--When capacity < length
--New Capacity = OLD capacity * 2 + 2 (First 2 is because of char is of 2 byte and second 2 is because of null char )
--if again capacity < length then Newest capacity = length
--All metehods of StringBuffer is Synchronized (In every case Synchronization is not good)


Problem Statement 
--Iterative Problem
--Recursive problem


-##### HW
---Problem :- Lucky Number Problem
------Statement :- Sum of all even places digit modulus division by 9 gives 0 then the number is Lucky
---Problem :- Reverse Number
---Problem :- Rotate a Number
------Statement :- +ve left to right , -ve right to left
---Problem :- Prime Number ( 4 logic are available do all , Hint:- Think about square root) 
---Problem :- ArmStrong Number (Sum of power of number of digit of every digit is equal to the original number )



######### Class 6 (12/10/2022) #############
-- InputStream (Class for taking input)
----- Input can come from Keyboard , Network , File
--Scanner
-----(predefined Class for taking input) 
-----Scanner is a Buffer
-----Methods of Scanner (nextint(),nextLine(),nextbyte(),etc)
-----nextLine take input until it didn't get '\n' 

--Buffer
-----(chunk () of Data)
-----() 
--Stream 
-----(Flow of Data)
-----(Example Live Streaming)
****{EXAMPLE Filling water in cooler There are two ways to fill first is use pipe and second is Use Balti.
 the pipe is an example of stream and balti is the example of buffer;}********
  IF ELSE 
  -----

############# Class 7 (14/10/2022) #########################
--Patterns
----- Pattern 1{
        *****
}
----- Pattern 2{
        *****
        *****
        *****
        *****
        *****
}
----- Pattern 3 {
        00000
        11111
        22222
        33333
        44444
}
----- Pattern 4 {
        01234
        01234
        01234
        01234
        01234
}
----- Pattern 5 {
        *
        **
        ***
        ****
        *****
}
----- Pattern 6 {
        1
        12
        123
        1234
        12345
}
----- Pattern 7 {
        *****
        ****
        ***
        **
        *
}
----- Pattern 8 {
        54321
        5432
        543
        54
        5
}
----- Pattern 9 {
        1
        23
        456
        78910
}
----- Pattern 10{
            *
           **
          ***
         ****
        *****
}
----- Pattern 11{
             *
            * *
           * * *
          * * * *
         * * * * *
}
----- Pttern 12{
              *
             ***
            *****
           *******
          *********
}
----- Pattern 13 {
         *********
          *******
           *****
            ***
             *
}
----- Pattern 14{
        *****
        *   *
        *   *
        *   *
        *****
}
----- Pattern 15{
        *****
        *   *
        * * *
        *   *
        *****
}

################## Class 8 (19/10/2022) ########################
--Prime Number
---- 4 method learnt (1. check from 2 to n-1 , 2. Check from 2 to n/2 , 3. Check from 2 to sqrt of (n))
------- 4. Prime Seive Method (First check with 2 & 3 then with in a loop of 5 to sqrt of n on the step of 6 and check with i and i+2 of loop)
----Count Digit of a number
----Count Digit of Zeroes of a number
----Reverse of a number
----Find GCD and LCM 

--HW
-----Armstrong Number
-----Palindrome Number
-----Questions on loop on the website codeforwin (https://codeforwin.org/2015/06/for-do-while-loop-programming-exercises.html)

#################### Class 9 (02/11/2022) ##################
--Recursion
--- Process calling itself
--- Breaking of large problem into smaller instances and solving it
--- 3 pre-requisite {
        - call stack
        - Local memory initialization 
        - Return Statement Working 
        }
--- Types of recursion {
        - Head Recursion (recursive call then processing logic )
        - tail recursion (processing logic then recursive call)
        - linear recursion (processing logic then recursive call then logic)
}
--- Recursion program contains{
        - Base case
        - Small Problem
        - Processing logic
}
--- Fall back

##### HW ####
-- Power of a number
-- Count zero in a digit
-- sum of a digit

#################### Class 10 (04/11/2022) ##################
--Reverse a String
##### HW #####
--Check Array is sorted or not
--Pattern 1{
        *
        **
        ***
        ****
        *****
}
--Pattern 2 {
        
        *****
        ****
        ***
        **
        *
}
--Pattern 3 {
        1
        2 3
        4 5 6
        7 8 9 10
}
#################### Class 11 (09/11/2022) ##################
--Interview 
----- Whiteboard Round {
        Q.   *
            * *
           * * *
        Q.Print Armstrong Number till given number using Recursion 
        Q.Print Prime Number till given number using Recursion 
}
##### HW #####
-- Pattern 1 {
        a
        ab
        abc
        abcd
        abcde
}
-- Pattern 2 {
        A 
        BC 
        DEF 
        GHIJ
        KLMNO
}
#################### Class 12 (11/11/2022) ##################
--Find the frequency of Every charecter of String {
        -- Make an array of 256 because of keyboard have 256 character so initially it has 0 in every index then we can increase while traversing (This approach is called Hashing )
        -- Traverse the array keep the first character again traverse the Whole array and count that character (Time complexity is n2)
}
--Print all the index of given element in given array

#################### Class 13 (16/11/2022) ##################
(We did questions in time limit)
--Problem 1:- Replace pi value with 3.14{
        i/p:- "3+pi*1-5*pi+6"
        o/p:- "3+3.14*1-5*3.14+6"
}
--Problem 2 :- Adjacent starts{
        i/p :- abbaaba
        o/p :- ab*ba*aba
}
--Problem 2 :- Check if a number is of power of 2 or not{
        i/p :- 16
        o/p :- True
}
##### HW #####
--Q. Power of 3
--Q. Power of 4
--Q. Power of N

#################### Class 14 (18/11/2022) ##################
--ToDo For The week {
        -- Do all the questions by recursion with and without return  
        Q. Solve recursive functions of all the questions did in loop in two ways function with return and func with no return
        Q. Array Search and get all the Search Occurrence
        Q. Array is sorted or not
        Q. Array search and replace all the Occurrence
        Q. Array all the elements sum Return / Print
        Q. Array all Elements Cube (Each Element) Return/Print
        Q. String Reverse
        Q. String Palindrome
        Q. String Title Case
        Q. String Search
        Q. String Replace
}
--Branch Recursion{
        -- Permutation Question will be solved by Branch recursion
        Q. Sub Sequence of a String
        ##### HW #####
        Q. All permutation of given String
}
#################### Class 15 (23/11/2022) ##################
--Problem 1{
        name:- Board Dice Problem
        Statement:- A board is given of nxm , a dice is given. find all the possible combination of dice for reaching the destination ?
}
--Problem 2{
        name:-PLayer In Maze 
        Statement:- A board is given of nxm , from (0,0) to target(n,m), player can go right or down
}
##### HW #####
--Problem 3{
        name:- SubSeq 
        Statement:- find All sub Sequence
        Signature{
                function:- static void subSeq(String str,String result)
                call in main:- subSeq("amit","")
        } 
}
--Problem 4{
        name:- Permutation Of String 
        Statement:- find All Permutation ofString
        Signature{
                function:- static void perm(String str,String result)
                call in main:- perm("amit","")
        }
}
--LeetCode problem {
        Q. 70
        Q. 509
}

#################### Class 17 (30/11/2022) ##################
--Sudoku Solver (submit on leetcode Q.37){
        solution:- {
                1. If col is not empty then go to next cell
                2. If col is empty then try to put from 1 to 9 for this check that value should be unique in row,col and sub grid
                3. 
        }
}
##### HW #####
--Letter Combination of a phone Number (LeetCode Q.17)

#################### Class 18 (05/12/2022) ##################
--Well Formed Parantheses {
        Company:- Microsoft, Apple, Nvidia, TCS
        LeetCode :- Q.22
        Statement:- Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.
}
--Word Search{
        Statement:- A 2D char board is given filled with char . Given a word we have to find if the word is given. We can go from right,left,down,up.
}
#################### Class 19 (07/12/2022) ##################
--Rat in a maze
##### HW #####
--Permutation On Array{
        i/p:- [1,2,3]
        o/p:-[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
}
--Combination Sum{
        LeetCode :- Q39
}
#################### Class 20 (09/12/2022) ##################
-- JosephursProblem
-- KnapsackProblem
#################### Class 21 (15/02/2023) ##################
--Time and Space complexity
  {
      - Linear Growth  (When graph of complexity is linear)
      - Constant (Graph will be horizontal line)
      - Quadratic (When complexity is in n square)
  }

--Asymptotic Analysis
  {
        1. Ignore Lower order terms
        2. Ignore Leading term constant
  }

--Asymptotic Notation 
  {
        -Best Case (Constant Time) (Omega)
        -Average Case (Linear Based on condition) (Theta)
        -Worst Case (Linear) (Big O)
  }

--Order Of Growth Measurement 
  {
        c< log log n < log n < n^1/3 < n^1/2 < n < n^2 < n^3 < n^4 < 2^n < n^n
  }

--Arrays
  {
        DS on array :- Arrays , stack , Queue , Linked List , Graph , Tree
        Characteristics :- {
                -Collection of similar data Types
                -Contiguous memory Allocation
                -Random Access
                -Cache Friendly
        }  
        Syntax :- int [] array_name = new int [];
  }
#################### Class 22 (17/02/2023) ##################
--Arrays 
  {
        --CRUD (Create Read Update Delete)
        -- Syntax
          {
                int arr[] = {1,2,3,4,5};
                int [] arr = {1,2,3,4,5};
                int[] arr = {1,2,3,4,5};
                int arr[] = new int[5];
                int arr[] = new int[]{2,1,4,6,1};

          }
        --problelm 1
          {
                Statement Find max element from array
                i/p : arr = {10,20,3,11,50}
                o/p : 50
          }
        --Problem 2
         {
                Statement:- Find Second max
                i/p : arr = {10,20,3,11,50}
                o/p : 20
         }
        --Problem 3
          {
                Statement :- Find span of an array
                span = max - min pf arr
                i/p : arr = {10,20,3,11,50}
                o/p : 47
          }
        --Problem 4 
          {
                Statement :- Print Bar Chart
                i/p : arr = {2,0,1,3,5,6,7}
                o/p : 
          }
  }

##### HW #####
Create following function of Array :-
1. Search
2. Update
3. Find second max
#################### Class 23 (22/02/2023) ##################
approach : Two pointer approach
--Arrays{
        --problem 5{
                statement : Reverse an array
                approach : Two pointer approach
        }
        --problem 6{
                statement : pair sum / two sum (LC:1)
                i/p : arr = {2,1,5,6,3,7}, k =11
                o/p : 2,3
                pair is 5 and 6 

        }
}
##### HW #####
1.Array is sorted or not {
        i/p : arr = {1,2,3,4,5}
        o/p : true;
}
2.Remove Repeated element (Leet Code - 26)
3.Find the Leader element{
        statement : if right side of element does not have any greater element then he is the leader element
        i/p : arr[] = {5,9,8,6,7,4}
        o/p : 4,7,8,9
}
#################### Class 24 (24/02/2023) ##################
--Array{
        --problem 7{
                statement : Rotate an array by one
                i/p : arr[] = {3,5,1,7,5,9}
                o/p : {5,1,7,5,9,3}
        }
        --problem 8{ 
                statement : Rotate na array to the right by k
                i/p : nums = {1,2,3,4,5,6,7}, k =3
                o/p : {5,6,7,1,2,3,4}
                basic approach : rotate the aray by 1 by k times
                optimize approach : call the reverse function from 0 to n-k-1 then again call the reverse from n-k to n-1 then again call reverse from 0 to n-1 (use two pointer approach in reverse function)
        }
        --problem 9{
                statement : Addition of two array
                i/p :arr1 = {3,4,5,6,7} arr2 = {2,3,4,5}
                o/p : {3,6,9,1,2}
        }
        --problem 10{
                statement : subtraction of two array 
                i/p : arr1 = {1,2,3,4}, arr2 = {5,6,7,8}
                o/p : {6,9,1,2}
        }
}
##### HW #####
--problem 8
--problem 10